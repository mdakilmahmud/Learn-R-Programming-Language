vector <- c(1,2,3,4,5)
length(vector)
class(vector)
# Exercise 2.3: Create a list that contains a number, a string, and a logical value.
my_list <- list(22, "Akil", FALSE)
print(my_list)
# Exercise 2.4: Create a matrix with 2 rows and 3 columns filled with numbers from 1 to 6.
my_matrix <- matrix(1:6, nrow = 2, ncol = 3)
print(my_matrix)
# Exercise 2.5: Create a dataframe with two columns: Name (character) and Age (numeric), with 3 rows.
my_dataframe <- data.frame(
Name = c("Akil", "Sami", "Rafi"),
Age = c(22, 24, 23))
print(my_dataframe)
# Exercise 3.1: Create a function add_numbers() that takes two arguments and returns their sum.
add_numbers <- function(x, y) {return(x + y)}
result <- add_numbers(10, 5)
print(result)
# Exercise 3.2: Create a function that returns the square of a number.
square_number <- function(x) {return(x^2)}
result <- square_number(10)
print(result)
# Exercise 3.3: Create a function is_even() that returns TRUE if a number is even, else FALSE.
is_even <- function(x) {return(x %% 2==0)}
print(is_even(10))
print(is_even(7))
# Exercise 3.4: Write a function to calculate the factorial of a number using a for loop.
factorial_loop <- function(n) {if (n < 0) {stop("Factorial is not defined for negative numbers.")}
result <- 1
for (i in 1:n) {result <- result * i}
return(result)}
print(factorial_loop(5))
print(factorial_loop(0))
# Exercise 4.1: Check if a number is even or odd using if...else.
check_even_odd <- function(n) {if (n %% 2==0) {return("Even")} else {return("Odd")}}
print(check_even_odd(10))
print(check_even_odd(7))
# Chapter 1: Introduction to R Programming
# Exercise 1.1: Print “Hello, R!” to the console.
print("Hello,R!")
# Exercise 1.2: Find the sum, difference, product, and division of 15 and 3.
sum <- 15+3
difference <- 15-3
product <- 15*3
division <- 15/3
print(sum)
print(difference)
print(product)
print(division)
# Exercise 1.3: Assign the value 20 to a variable x and print it.
x <- 20
x
# Exercise 1.4: Check the class of the value "R is awesome!".
class("R is awesome!")
# Exercise 1.5: Use help(mean) to open help for the mean function.
help(mean)
# Chapter 2: Data Types and Variables
# Exercise 2.1: Create a numeric, character, and logical variable and print their types.
num <- 5
char <- "Rick"
log <- TRUE
class(num)
class(char)
class(log)
# Exercise 2.2: Create a vector of numbers from 1 to 5. Find its length and class.
vector <- c(1,2,3,4,5)
length(vector)
class(vector)
# Exercise 2.3: Create a list that contains a number, a string, and a logical value.
my_list <- list(22, "Akil", FALSE)
print(my_list)
# Exercise 2.4: Create a matrix with 2 rows and 3 columns filled with numbers from 1 to 6.
my_matrix <- matrix(1:6, nrow = 2, ncol = 3)
print(my_matrix)
# Exercise 2.5: Create a dataframe with two columns: Name (character) and Age (numeric), with 3 rows.
my_dataframe <- data.frame(
Name = c("Akil", "Sami", "Rafi"),
Age = c(22, 24, 23))
print(my_dataframe)
# Chapter 3: Functions
# Exercise 3.1: Create a function add_numbers() that takes two arguments and returns their sum.
add_numbers <- function(x, y) {return(x + y)}
result <- add_numbers(10, 5)
print(result)
# Exercise 3.2: Create a function that returns the square of a number.
square_number <- function(x) {return(x^2)}
result <- square_number(10)
print(result)
# Exercise 3.3: Create a function is_even() that returns TRUE if a number is even, else FALSE.
is_even <- function(x) {return(x %% 2==0)}
print(is_even(10))
print(is_even(7))
# Exercise 3.4: Write a function to calculate the factorial of a number using a for loop.
factorial_loop <- function(n) {if (n < 0) {stop("Factorial is not defined for negative numbers.")}
result <- 1
for (i in 1:n) {result <- result * i}
return(result)}
print(factorial_loop(5))
print(factorial_loop(0))
# Chapter 4: Control Structures
# Exercise 4.1: Check if a number is even or odd using if...else.
check_even_odd <- function(n) {if (!is.numeric(n)||length(n)!=1) {stop("Input must be a single numeric value.")}
if (n %% 2 == 0) {return("Even")} else {return("Odd")}}
print(check_even_odd(10))
print(check_even_odd(7))
# Exercise 4.2: Print the square of numbers from 1 to 5 using a for loop.
for (i in 1:5) {print(i^2)}
# Exercise 4.3: Print numbers from 10 to 1 using a while loop.
i <- 10
while (i >= 1) {print(i) i <- i - 1}
i <- 10
while (i >= 1) {print(i)i <- i - 1}
i <- 10
while (i >= 1) { print(i); i <- i - 1 }
# Chapter 1: Introduction to R Programming
# Exercise 1.1: Print “Hello, R!” to the console.
print("Hello,R!")
# Exercise 1.2: Find the sum, difference, product, and division of 15 and 3.
sum <- 15+3
difference <- 15-3
product <- 15*3
division <- 15/3
print(sum)
print(difference)
print(product)
print(division)
# Exercise 1.3: Assign the value 20 to a variable x and print it.
x <- 20
x
# Exercise 1.4: Check the class of the value "R is awesome!".
class("R is awesome!")
# Exercise 1.5: Use help(mean) to open help for the mean function.
help(mean)
# Chapter 2: Data Types and Variables
# Exercise 2.1: Create a numeric, character, and logical variable and print their types.
num <- 5
char <- "Rick"
log <- TRUE
class(num)
class(char)
class(log)
# Exercise 2.2: Create a vector of numbers from 1 to 5. Find its length and class.
vector <- c(1,2,3,4,5)
length(vector)
class(vector)
# Exercise 2.3: Create a list that contains a number, a string, and a logical value.
my_list <- list(22, "Akil", FALSE)
print(my_list)
# Exercise 2.4: Create a matrix with 2 rows and 3 columns filled with numbers from 1 to 6.
my_matrix <- matrix(1:6, nrow = 2, ncol = 3)
print(my_matrix)
# Exercise 2.5: Create a dataframe with two columns: Name (character) and Age (numeric), with 3 rows.
my_dataframe <- data.frame(
Name = c("Akil", "Sami", "Rafi"),
Age = c(22, 24, 23))
print(my_dataframe)
# Chapter 3: Functions
# Exercise 3.1: Create a function add_numbers() that takes two arguments and returns their sum.
add_numbers <- function(x, y) {return(x + y)}
result <- add_numbers(10, 5)
print(result)
# Exercise 3.2: Create a function that returns the square of a number.
square_number <- function(x) {return(x^2)}
result <- square_number(10)
print(result)
# Exercise 3.3: Create a function is_even() that returns TRUE if a number is even, else FALSE.
is_even <- function(x) {return(x %% 2==0)}
print(is_even(10))
print(is_even(7))
# Exercise 3.4: Write a function to calculate the factorial of a number using a for loop.
factorial_loop <- function(n) {if (n < 0) {stop("Factorial is not defined for negative numbers.")}
result <- 1
for (i in 1:n) {result <- result * i}
return(result)}
print(factorial_loop(5))
print(factorial_loop(0))
# Chapter 4: Control Structures
# Exercise 4.1: Check if a number is even or odd using if...else.
check_even_odd <- function(n) {if (!is.numeric(n)||length(n)!=1) {stop("Input must be a single numeric value.")}
if (n %% 2 == 0) {return("Even")} else {return("Odd")}}
print(check_even_odd(10))
print(check_even_odd(7))
# Exercise 4.2: Print the square of numbers from 1 to 5 using a for loop.
for (i in 1:5) {print(i^2)}
# Exercise 4.3: Print numbers from 10 to 1 using a while loop.
i <- 10
while (i >= 1) { print(i); i <- i - 1 }
# Exercise 4.4: Print “Done” 3 times using a repeat loop.
count <- 1
repeat {print("Done") count <- count + 1
count <- 1
repeat {print("Done"); count <- count + 1
if (count > 3) {break}}
# Chapter 1: Introduction to R Programming
# Exercise 1.1: Print “Hello, R!” to the console.
print("Hello,R!")
# Exercise 1.2: Find the sum, difference, product, and division of 15 and 3.
sum <- 15+3
difference <- 15-3
product <- 15*3
division <- 15/3
print(sum)
print(difference)
print(product)
print(division)
# Exercise 1.3: Assign the value 20 to a variable x and print it.
x <- 20
x
# Exercise 1.4: Check the class of the value "R is awesome!".
class("R is awesome!")
# Exercise 1.5: Use help(mean) to open help for the mean function.
help(mean)
# Chapter 2: Data Types and Variables
# Exercise 2.1: Create a numeric, character, and logical variable and print their types.
num <- 5
char <- "Rick"
log <- TRUE
class(num)
class(char)
class(log)
# Exercise 2.2: Create a vector of numbers from 1 to 5. Find its length and class.
vector <- c(1,2,3,4,5)
length(vector)
class(vector)
# Exercise 2.3: Create a list that contains a number, a string, and a logical value.
my_list <- list(22, "Akil", FALSE)
print(my_list)
# Exercise 2.4: Create a matrix with 2 rows and 3 columns filled with numbers from 1 to 6.
my_matrix <- matrix(1:6, nrow = 2, ncol = 3)
print(my_matrix)
# Exercise 2.5: Create a dataframe with two columns: Name (character) and Age (numeric), with 3 rows.
my_dataframe <- data.frame(
Name = c("Akil", "Sami", "Rafi"),
Age = c(22, 24, 23))
print(my_dataframe)
# Chapter 3: Functions
# Exercise 3.1: Create a function add_numbers() that takes two arguments and returns their sum.
add_numbers <- function(x, y) {return(x + y)}
result <- add_numbers(10, 5)
print(result)
# Exercise 3.2: Create a function that returns the square of a number.
square_number <- function(x) {return(x^2)}
result <- square_number(10)
print(result)
# Exercise 3.3: Create a function is_even() that returns TRUE if a number is even, else FALSE.
is_even <- function(x) {return(x %% 2==0)}
print(is_even(10))
print(is_even(7))
# Exercise 3.4: Write a function to calculate the factorial of a number using a for loop.
factorial_loop <- function(n) {if (n < 0) {stop("Factorial is not defined for negative numbers.")}
result <- 1
for (i in 1:n) {result <- result * i}
return(result)}
print(factorial_loop(5))
print(factorial_loop(0))
# Chapter 4: Control Structures
# Exercise 4.1: Check if a number is even or odd using if...else.
check_even_odd <- function(n) {if (!is.numeric(n)||length(n)!=1) {stop("Input must be a single numeric value.")}
if (n %% 2 == 0) {return("Even")} else {return("Odd")}}
print(check_even_odd(10))
print(check_even_odd(7))
# Exercise 4.2: Print the square of numbers from 1 to 5 using a for loop.
for (i in 1:5) {print(i^2)}
# Exercise 4.3: Print numbers from 10 to 1 using a while loop.
i <- 10
while (i >= 1) { print(i); i <- i - 1 }
# Exercise 4.4: Print “Done” 3 times using a repeat loop.
count <- 1
repeat {print("Done"); count <- count + 1
if (count > 3) {break}}
# Chapter 5: Data Handling & Exploration
# Exercise 5.1: Load the built-in iris dataset and view its structure using str().
str(iris)
# Exercise 5.2: Load a CSV file named students.csv and view the first 6 rows.
students <- read.csv("students.csv")
head(students)
# Exercise 5.3: Find the number of rows and columns in your dataset using nrow() and ncol().
nrow(students)
ncol(students)
# Exercise 5.4: Print the column names using names().
names(students)
# Exercise 5.5: Use summary() to generate descriptive stats for a numeric column like Score.
summary(students$Score)
# Chapter 6: Data Cleaning & Manipulation with dplyr
# Exercise 6.1: Use select() to retrieve only the columns Name and Score.
library(dplyr)
students %>% select(Name, Score)
students %>% select(Name, Score)
install.packages("dplyr")
library(dplyr)
students %>% select(Name, Score)
# Chapter 1: Introduction to R Programming
# Exercise 1.1: Print “Hello, R!” to the console.
print("Hello,R!")
# Exercise 1.2: Find the sum, difference, product, and division of 15 and 3.
sum <- 15+3
difference <- 15-3
product <- 15*3
division <- 15/3
print(sum)
print(difference)
print(product)
print(division)
# Exercise 1.3: Assign the value 20 to a variable x and print it.
x <- 20
x
# Exercise 1.4: Check the class of the value "R is awesome!".
class("R is awesome!")
# Exercise 1.5: Use help(mean) to open help for the mean function.
help(mean)
# Chapter 2: Data Types and Variables
# Exercise 2.1: Create a numeric, character, and logical variable and print their types.
num <- 5
char <- "Rick"
log <- TRUE
class(num)
class(char)
class(log)
# Exercise 2.2: Create a vector of numbers from 1 to 5. Find its length and class.
vector <- c(1,2,3,4,5)
length(vector)
class(vector)
# Exercise 2.3: Create a list that contains a number, a string, and a logical value.
my_list <- list(22, "Akil", FALSE)
print(my_list)
# Exercise 2.4: Create a matrix with 2 rows and 3 columns filled with numbers from 1 to 6.
my_matrix <- matrix(1:6, nrow = 2, ncol = 3)
print(my_matrix)
# Exercise 2.5: Create a dataframe with two columns: Name (character) and Age (numeric), with 3 rows.
my_dataframe <- data.frame(
Name = c("Akil", "Sami", "Rafi"),
Age = c(22, 24, 23))
print(my_dataframe)
# Chapter 3: Functions
# Exercise 3.1: Create a function add_numbers() that takes two arguments and returns their sum.
add_numbers <- function(x, y) {return(x + y)}
result <- add_numbers(10, 5)
print(result)
# Exercise 3.2: Create a function that returns the square of a number.
square_number <- function(x) {return(x^2)}
result <- square_number(10)
print(result)
# Exercise 3.3: Create a function is_even() that returns TRUE if a number is even, else FALSE.
is_even <- function(x) {return(x %% 2==0)}
print(is_even(10))
print(is_even(7))
# Exercise 3.4: Write a function to calculate the factorial of a number using a for loop.
factorial_loop <- function(n) {if (n < 0) {stop("Factorial is not defined for negative numbers.")}
result <- 1
for (i in 1:n) {result <- result * i}
return(result)}
print(factorial_loop(5))
print(factorial_loop(0))
# Chapter 4: Control Structures
# Exercise 4.1: Check if a number is even or odd using if...else.
check_even_odd <- function(n) {if (!is.numeric(n)||length(n)!=1) {stop("Input must be a single numeric value.")}
if (n %% 2 == 0) {return("Even")} else {return("Odd")}}
print(check_even_odd(10))
print(check_even_odd(7))
# Exercise 4.2: Print the square of numbers from 1 to 5 using a for loop.
for (i in 1:5) {print(i^2)}
# Exercise 4.3: Print numbers from 10 to 1 using a while loop.
i <- 10
while (i >= 1) { print(i); i <- i - 1 }
# Exercise 4.4: Print “Done” 3 times using a repeat loop.
count <- 1
repeat {print("Done"); count <- count + 1
if (count > 3) {break}}
# Chapter 5: Data Handling & Exploration
# Exercise 5.1: Load the built-in iris dataset and view its structure using str().
str(iris)
# Exercise 5.2: Load a CSV file named students.csv and view the first 6 rows.
students <- read.csv("students.csv")
head(students)
# Exercise 5.3: Find the number of rows and columns in your dataset using nrow() and ncol().
nrow(students)
ncol(students)
# Exercise 5.4: Print the column names using names().
names(students)
# Exercise 5.5: Use summary() to generate descriptive stats for a numeric column like Score.
summary(students$Score)
# Chapter 6: Data Cleaning & Manipulation with dplyr
# Exercise 6.1: Use select() to retrieve only the columns Name and Score.
install.packages("dplyr")
library(dplyr)
students %>% select(Name, Score)
# Exercise 6.2: Use filter() to show rows where Score ≥ 85.
students %>% filter(Score >= 85)
# Exercise 6.3: Use arrange() to sort the data by Age in descending order.
students %>% arrange(desc(Age))
# Exercise 6.4: Use mutate() to create a column PassFail based on whether Score ≥ 40.
students %>% mutate(PassFail = ifelse(Score >= 40, "Pass", "Fail"))
# Exercise 6.5: Use group_by() and summarize() to find average Score by Gender.
students %>% group_by(Gender) %>% summarize(avg_score = mean(Score, na.rm = TRUE))
# Exercise 6.6: Group by Gender and count the number of students in each group.
students %>% group_by(Gender) %>% summarize(count = n())
# Exercise 6.7: Use a pipeline to filter students with Score > 80, and select Name, Gender, and Score.
students %>%
filter(Score > 80) %>%
select(Name, Gender, Score)
students %>% select(Name, Score)
library(dplyr)  # Same goes for this
students %>% select(Name, Score)
# Chapter 1: Introduction to R Programming
# Exercise 1.1: Print “Hello, R!” to the console.
print("Hello,R!")
# Exercise 1.2: Find the sum, difference, product, and division of 15 and 3.
sum <- 15+3
difference <- 15-3
product <- 15*3
division <- 15/3
print(sum)
print(difference)
print(product)
print(division)
# Exercise 1.3: Assign the value 20 to a variable x and print it.
x <- 20
x
# Exercise 1.4: Check the class of the value "R is awesome!".
class("R is awesome!")
# Exercise 1.5: Use help(mean) to open help for the mean function.
help(mean)
# Chapter 2: Data Types and Variables
# Exercise 2.1: Create a numeric, character, and logical variable and print their types.
num <- 5
char <- "Rick"
log <- TRUE
class(num)
class(char)
class(log)
# Exercise 2.2: Create a vector of numbers from 1 to 5. Find its length and class.
vector <- c(1,2,3,4,5)
length(vector)
class(vector)
# Exercise 2.3: Create a list that contains a number, a string, and a logical value.
my_list <- list(22, "Akil", FALSE)
print(my_list)
# Exercise 2.4: Create a matrix with 2 rows and 3 columns filled with numbers from 1 to 6.
my_matrix <- matrix(1:6, nrow = 2, ncol = 3)
print(my_matrix)
# Exercise 2.5: Create a dataframe with two columns: Name (character) and Age (numeric), with 3 rows.
my_dataframe <- data.frame(
Name = c("Akil", "Sami", "Rafi"),
Age = c(22, 24, 23))
print(my_dataframe)
# Chapter 3: Functions
# Exercise 3.1: Create a function add_numbers() that takes two arguments and returns their sum.
add_numbers <- function(x, y) {return(x + y)}
result <- add_numbers(10, 5)
print(result)
# Exercise 3.2: Create a function that returns the square of a number.
square_number <- function(x) {return(x^2)}
result <- square_number(10)
print(result)
# Exercise 3.3: Create a function is_even() that returns TRUE if a number is even, else FALSE.
is_even <- function(x) {return(x %% 2==0)}
print(is_even(10))
print(is_even(7))
# Exercise 3.4: Write a function to calculate the factorial of a number using a for loop.
factorial_loop <- function(n) {if (n < 0) {stop("Factorial is not defined for negative numbers.")}
result <- 1
for (i in 1:n) {result <- result * i}
return(result)}
print(factorial_loop(5))
print(factorial_loop(0))
# Chapter 4: Control Structures
# Exercise 4.1: Check if a number is even or odd using if...else.
check_even_odd <- function(n) {if (!is.numeric(n)||length(n)!=1) {stop("Input must be a single numeric value.")}
if (n %% 2 == 0) {return("Even")} else {return("Odd")}}
print(check_even_odd(10))
print(check_even_odd(7))
# Exercise 4.2: Print the square of numbers from 1 to 5 using a for loop.
for (i in 1:5) {print(i^2)}
# Exercise 4.3: Print numbers from 10 to 1 using a while loop.
i <- 10
while (i >= 1) { print(i); i <- i - 1 }
# Exercise 4.4: Print “Done” 3 times using a repeat loop.
count <- 1
repeat {print("Done"); count <- count + 1
if (count > 3) {break}}
# Chapter 5: Data Handling & Exploration
# Exercise 5.1: Load the built-in iris dataset and view its structure using str().
str(iris)
# Exercise 5.2: Load a CSV file named students.csv and view the first 6 rows.
students <- read.csv("students.csv")
head(students)
# Exercise 5.3: Find the number of rows and columns in your dataset using nrow() and ncol().
nrow(students)
ncol(students)
# Exercise 5.4: Print the column names using names().
names(students)
# Exercise 5.5: Use summary() to generate descriptive stats for a numeric column like Score.
summary(students$Score)
# Chapter 6: Data Cleaning & Manipulation with dplyr
# Exercise 6.1: Use select() to retrieve only the columns Name and Score.
# install.packages("dplyr")  # If you didn't install it earlier
library(dplyr)
students %>% select(Name, Score)
# Exercise 6.2: Use filter() to show rows where Score ≥ 85.
students %>% filter(Score >= 85)
# Exercise 6.3: Use arrange() to sort the data by Age in descending order.
students %>% arrange(desc(Age))
# Exercise 6.4: Use mutate() to create a column PassFail based on whether Score ≥ 40.
students %>% mutate(PassFail = ifelse(Score >= 40, "Pass", "Fail"))
# Exercise 6.5: Use group_by() and summarize() to find average Score by Gender.
students %>% group_by(Gender) %>% summarize(avg_score = mean(Score, na.rm = TRUE))
# Exercise 6.6: Group by Gender and count the number of students in each group.
students %>% group_by(Gender) %>% summarize(count = n())
# Exercise 6.7: Use a pipeline to filter students with Score > 80, and select Name, Gender, and Score.
students %>%
filter(Score > 80) %>%
select(Name, Gender, Score)
